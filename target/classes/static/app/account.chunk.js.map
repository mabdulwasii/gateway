{"version":3,"file":"app/account.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/account/index.tsx","webpack:///./src/main/webapp/app/modules/account/password/password.tsx","webpack:///./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\n\r\nimport Settings from './settings/settings';\r\nimport Password from './password/password';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/settings`} component={Settings} />\r\n    <ErrorBoundaryRoute path={`${match.url}/password`} component={Password} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\n\r\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\r\n\r\nexport const PasswordPage = (props: IUserPasswordProps) => {\r\n  const [password, setPassword] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.reset();\r\n    props.getSession();\r\n    return () => {\r\n      props.reset();\r\n    };\r\n  }, []);\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    props.savePassword(values.currentPassword, values.newPassword);\r\n  };\r\n\r\n  const updatePassword = event => setPassword(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"password-title\">\r\n            <Translate contentKey=\"password.title\" interpolate={{ username: props.account.login }}>\r\n              Password for {props.account.login}\r\n            </Translate>\r\n          </h2>\r\n          <AvForm id=\"password-form\" onValidSubmit={handleValidSubmit}>\r\n            <AvField\r\n              name=\"currentPassword\"\r\n              label={translate('global.form.currentpassword.label')}\r\n              placeholder={translate('global.form.currentpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n              }}\r\n            />\r\n            <AvField\r\n              name=\"newPassword\"\r\n              label={translate('global.form.newpassword.label')}\r\n              placeholder={translate('global.form.newpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') },\r\n              }}\r\n              onChange={updatePassword}\r\n            />\r\n            <PasswordStrengthBar password={password} />\r\n            <AvField\r\n              name=\"confirmPassword\"\r\n              label={translate('global.form.confirmpassword.label')}\r\n              placeholder={translate('global.form.confirmpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: {\r\n                  value: true,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.required'),\r\n                },\r\n                minLength: {\r\n                  value: 4,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.minlength'),\r\n                },\r\n                maxLength: {\r\n                  value: 50,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.maxlength'),\r\n                },\r\n                match: {\r\n                  value: 'newPassword',\r\n                  errorMessage: translate('global.messages.error.dontmatch'),\r\n                },\r\n              }}\r\n            />\r\n            <Button color=\"success\" type=\"submit\">\r\n              <Translate contentKey=\"password.form.button\">Save</Translate>\r\n            </Button>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated,\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, savePassword, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordPage);\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Col, Alert, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\n\r\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\r\n\r\nexport const SettingsPage = (props: IUserSettingsProps) => {\r\n  useEffect(() => {\r\n    props.getSession();\r\n    return () => {\r\n      props.reset();\r\n    };\r\n  }, []);\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    const account = {\r\n      ...props.account,\r\n      ...values,\r\n    };\r\n\r\n    props.saveAccountSettings(account);\r\n    event.persist();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"settings-title\">\r\n            <Translate contentKey=\"settings.title\" interpolate={{ username: props.account.login }}>\r\n              User settings for {props.account.login}\r\n            </Translate>\r\n          </h2>\r\n          <AvForm id=\"settings-form\" onValidSubmit={handleValidSubmit}>\r\n            {/* First name */}\r\n            <AvField\r\n              className=\"form-control\"\r\n              name=\"firstName\"\r\n              label={translate('settings.form.firstname')}\r\n              id=\"firstName\"\r\n              placeholder={translate('settings.form.firstname.placeholder')}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\r\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') },\r\n              }}\r\n              value={props.account.firstName}\r\n            />\r\n            {/* Last name */}\r\n            <AvField\r\n              className=\"form-control\"\r\n              name=\"lastName\"\r\n              label={translate('settings.form.lastname')}\r\n              id=\"lastName\"\r\n              placeholder={translate('settings.form.lastname.placeholder')}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\r\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') },\r\n              }}\r\n              value={props.account.lastName}\r\n            />\r\n            {/* Email */}\r\n            <AvField\r\n              name=\"email\"\r\n              label={translate('global.form.email.label')}\r\n              placeholder={translate('global.form.email.placeholder')}\r\n              type=\"email\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') },\r\n              }}\r\n              value={props.account.email}\r\n            />\r\n            {/* Language key */}\r\n            <AvField\r\n              type=\"select\"\r\n              id=\"langKey\"\r\n              name=\"langKey\"\r\n              className=\"form-control\"\r\n              label={translate('settings.form.language')}\r\n              value={props.account.langKey}\r\n            >\r\n              {locales.map(locale => (\r\n                <option value={locale} key={locale}>\r\n                  {languages[locale].name}\r\n                </option>\r\n              ))}\r\n            </AvField>\r\n            <Button color=\"primary\" type=\"submit\">\r\n              <Translate contentKey=\"settings.form.button\">Save</Translate>\r\n            </Button>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated,\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AAEA;AAOA;AACA;AACA;AACA;AAIA;AAOA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AAIA;AAcA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;A","sourceRoot":""}