{"version":3,"file":"app/account.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/account/index.tsx","webpack:///./src/main/webapp/app/modules/account/password/password.tsx","webpack:///./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from 'react';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\n\nimport Settings from './settings/settings';\nimport Password from './password/password';\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/settings`} component={Settings} />\n    <ErrorBoundaryRoute path={`${match.url}/password`} component={Password} />\n  </div>\n);\n\nexport default Routes;\n","import React, { useState, useEffect } from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Button } from 'reactstrap';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\n\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\n\nexport const PasswordPage = (props: IUserPasswordProps) => {\n  const [password, setPassword] = useState('');\n\n  useEffect(() => {\n    props.reset();\n    props.getSession();\n    return () => {\n      props.reset();\n    };\n  }, []);\n\n  const handleValidSubmit = (event, values) => {\n    props.savePassword(values.currentPassword, values.newPassword);\n  };\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"password-title\">\n            <Translate contentKey=\"password.title\" interpolate={{ username: props.account.login }}>\n              Password for {props.account.login}\n            </Translate>\n          </h2>\n          <AvForm id=\"password-form\" onValidSubmit={handleValidSubmit}>\n            <AvField\n              name=\"currentPassword\"\n              label={translate('global.form.currentpassword.label')}\n              placeholder={translate('global.form.currentpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n              }}\n            />\n            <AvField\n              name=\"newPassword\"\n              label={translate('global.form.newpassword.label')}\n              placeholder={translate('global.form.newpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') },\n              }}\n              onChange={updatePassword}\n            />\n            <PasswordStrengthBar password={password} />\n            <AvField\n              name=\"confirmPassword\"\n              label={translate('global.form.confirmpassword.label')}\n              placeholder={translate('global.form.confirmpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: {\n                  value: true,\n                  errorMessage: translate('global.messages.validate.confirmpassword.required'),\n                },\n                minLength: {\n                  value: 4,\n                  errorMessage: translate('global.messages.validate.confirmpassword.minlength'),\n                },\n                maxLength: {\n                  value: 50,\n                  errorMessage: translate('global.messages.validate.confirmpassword.maxlength'),\n                },\n                match: {\n                  value: 'newPassword',\n                  errorMessage: translate('global.messages.error.dontmatch'),\n                },\n              }}\n            />\n            <Button color=\"success\" type=\"submit\">\n              <Translate contentKey=\"password.form.button\">Save</Translate>\n            </Button>\n          </AvForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated,\n});\n\nconst mapDispatchToProps = { getSession, savePassword, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordPage);\n","import React, { useEffect } from 'react';\nimport { Button, Col, Alert, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Translate, translate } from 'react-jhipster';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nimport { locales, languages } from 'app/config/translation';\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\n\nexport const SettingsPage = (props: IUserSettingsProps) => {\n  useEffect(() => {\n    props.getSession();\n    return () => {\n      props.reset();\n    };\n  }, []);\n\n  const handleValidSubmit = (event, values) => {\n    const account = {\n      ...props.account,\n      ...values,\n    };\n\n    props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"settings-title\">\n            <Translate contentKey=\"settings.title\" interpolate={{ username: props.account.login }}>\n              User settings for {props.account.login}\n            </Translate>\n          </h2>\n          <AvForm id=\"settings-form\" onValidSubmit={handleValidSubmit}>\n            {/* First name */}\n            <AvField\n              className=\"form-control\"\n              name=\"firstName\"\n              label={translate('settings.form.firstname')}\n              id=\"firstName\"\n              placeholder={translate('settings.form.firstname.placeholder')}\n              validate={{\n                required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') },\n              }}\n              value={props.account.firstName}\n            />\n            {/* Last name */}\n            <AvField\n              className=\"form-control\"\n              name=\"lastName\"\n              label={translate('settings.form.lastname')}\n              id=\"lastName\"\n              placeholder={translate('settings.form.lastname.placeholder')}\n              validate={{\n                required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') },\n              }}\n              value={props.account.lastName}\n            />\n            {/* Email */}\n            <AvField\n              name=\"email\"\n              label={translate('global.form.email.label')}\n              placeholder={translate('global.form.email.placeholder')}\n              type=\"email\"\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') },\n              }}\n              value={props.account.email}\n            />\n            {/* Language key */}\n            <AvField\n              type=\"select\"\n              id=\"langKey\"\n              name=\"langKey\"\n              className=\"form-control\"\n              label={translate('settings.form.language')}\n              value={props.account.langKey}\n            >\n              {locales.map(locale => (\n                <option value={locale} key={locale}>\n                  {languages[locale].name}\n                </option>\n              ))}\n            </AvField>\n            <Button color=\"primary\" type=\"submit\">\n              <Translate contentKey=\"settings.form.button\">Save</Translate>\n            </Button>\n          </AvForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated,\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AAEA;AAOA;AACA;AACA;AACA;AAIA;AAOA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AAIA;AAcA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;A","sourceRoot":""}