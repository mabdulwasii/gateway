{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/docs/docs.scss","webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.scss?acad","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/gateway/gateway.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"iframe {\\n  background: white;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Input, Row, Table } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState, IPaginationBaseState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getAudits } from '../administration.reducer';\r\n\r\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nconst previousMonth = (): string => {\r\n  const now: Date = new Date();\r\n  const fromDate =\r\n    now.getMonth() === 0\r\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\r\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\r\n  return fromDate.toISOString().slice(0, 10);\r\n};\r\n\r\nconst today = (): string => {\r\n  // Today + 1 day - needed if the current day must be included\r\n  const day: Date = new Date();\r\n  day.setDate(day.getDate() + 1);\r\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\r\n  return toDate.toISOString().slice(0, 10);\r\n};\r\n\r\nexport const AuditsPage = (props: IAuditsPageProps) => {\r\n  const [pagination, setPagination] = useState(\r\n    overridePaginationStateWithQueryParams(getSortState(props.location, ITEMS_PER_PAGE), props.location.search)\r\n  );\r\n  const [fromDate, setFromDate] = useState(previousMonth());\r\n  const [toDate, setToDate] = useState(today());\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    getAllAudits();\r\n  }, [fromDate, toDate, pagination.activePage, pagination.order, pagination.sort]);\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    transition();\r\n  }, [pagination.activePage, pagination.order, pagination.sort]);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(props.location.search);\r\n    const page = params.get('page');\r\n    const sort = params.get('sort');\r\n    if (page && sort) {\r\n      const sortSplit = sort.split(',');\r\n      setPagination({\r\n        ...pagination,\r\n        activePage: +page,\r\n        sort: sortSplit[0],\r\n        order: sortSplit[1],\r\n      });\r\n    }\r\n  }, [props.location.search]);\r\n\r\n  const onChangeFromDate = evt => setFromDate(evt.target.value);\r\n\r\n  const onChangeToDate = evt => setToDate(evt.target.value);\r\n\r\n  const sort = p => () =>\r\n    setPagination({\r\n      ...pagination,\r\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\r\n      sort: p,\r\n    });\r\n\r\n  const transition = () => {\r\n    const endURL = `?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`;\r\n    if (props.location.search !== endURL) {\r\n      props.history.push(`${props.location.pathname}${endURL}`);\r\n    }\r\n  };\r\n\r\n  const handlePagination = currentPage =>\r\n    setPagination({\r\n      ...pagination,\r\n      activePage: currentPage,\r\n    });\r\n\r\n  const getAllAudits = () => {\r\n    props.getAudits(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`, fromDate, toDate);\r\n  };\r\n\r\n  const { audits, totalItems } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"audits-page-heading\">Audits</h2>\r\n      <span>\r\n        <Translate contentKey=\"audits.filter.from\">from</Translate>\r\n      </span>\r\n      <Input type=\"date\" value={fromDate} onChange={onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\r\n      <span>\r\n        <Translate contentKey=\"audits.filter.to\">to</Translate>\r\n      </span>\r\n      <Input type=\"date\" value={toDate} onChange={onChangeToDate} name=\"toDate\" id=\"toDate\" />\r\n      {audits && audits.length > 0 ? (\r\n        <Table striped responsive>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={sort('auditEventDate')}>\r\n                <Translate contentKey=\"audits.table.header.date\">Date</Translate>\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={sort('principal')}>\r\n                <Translate contentKey=\"audits.table.header.principal\">User</Translate>\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={sort('auditEventType')}>\r\n                <Translate contentKey=\"audits.table.header.status\">State</Translate>\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th>\r\n                <Translate contentKey=\"audits.table.header.data\">Extra data</Translate>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {audits.map((audit, i) => (\r\n              <tr key={`audit-${i}`}>\r\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\r\n                <td>{audit.principal}</td>\r\n                <td>{audit.type}</td>\r\n                <td>\r\n                  {audit.data ? audit.data.message : null}\r\n                  {audit.data ? audit.data.remoteAddress : null}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <div className=\"alert alert-warning\">\r\n          <Translate contentKey=\"audits.notFound\">No audit found</Translate>\r\n        </div>\r\n      )}\r\n      {props.totalItems ? (\r\n        <div className={audits && audits.length > 0 ? '' : 'd-none'}>\r\n          <Row className=\"justify-content-center\">\r\n            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\r\n          </Row>\r\n          <Row className=\"justify-content-center\">\r\n            <JhiPagination\r\n              activePage={pagination.activePage}\r\n              onSelect={handlePagination}\r\n              maxButtons={5}\r\n              itemsPerPage={pagination.itemsPerPage}\r\n              totalItems={props.totalItems}\r\n            />\r\n          </Row>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  audits: storeState.administration.audits,\r\n  totalItems: storeState.administration.totalItems,\r\n});\r\n\r\nconst mapDispatchToProps = { getAudits };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditsPage);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\n\r\nimport { getConfigurations, getEnv } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\r\n\r\nexport const ConfigurationPage = (props: IConfigurationPageProps) => {\r\n  const [filter, setFilter] = useState('');\r\n  const [reversePrefix, setReversePrefix] = useState(false);\r\n  const [reverseProperties, setReverseProperties] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.getConfigurations();\r\n    props.getEnv();\r\n  }, []);\r\n\r\n  const changeFilter = evt => setFilter(evt.target.value);\r\n\r\n  const envFilterFn = configProp => configProp.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const changeReversePrefix = () => setReversePrefix(!reversePrefix);\r\n\r\n  const changeReverseProperties = () => setReverseProperties(!reverseProperties);\r\n\r\n  const getContextList = contexts =>\r\n    Object.values(contexts)\r\n      .map((v: any) => v.beans)\r\n      .reduce((acc, e) => ({ ...acc, ...e }));\r\n\r\n  const { configuration } = props;\r\n\r\n  const configProps = configuration && configuration.configProps ? configuration.configProps : {};\r\n\r\n  const env = configuration && configuration.env ? configuration.env : {};\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"configuration-page-heading\">\r\n        <Translate contentKey=\"configuration.title\">Configuration</Translate>\r\n      </h2>\r\n      <span>\r\n        <Translate contentKey=\"configuration.filter\">Filter</Translate>\r\n      </span>{' '}\r\n      <Input type=\"search\" value={filter} onChange={changeFilter} name=\"search\" id=\"search\" />\r\n      <label>Spring configuration</label>\r\n      <Table className=\"table table-striped table-bordered table-responsive d-table\">\r\n        <thead>\r\n          <tr>\r\n            <th onClick={changeReversePrefix}>\r\n              <Translate contentKey=\"configuration.table.prefix\">Prefix</Translate>\r\n            </th>\r\n            <th onClick={changeReverseProperties}>\r\n              <Translate contentKey=\"configuration.table.properties\">Properties</Translate>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {configProps.contexts\r\n            ? Object.values(getContextList(configProps.contexts))\r\n                .filter(propsFilterFn)\r\n                .map((property: any, propIndex) => (\r\n                  <tr key={propIndex}>\r\n                    <td>{property['prefix']}</td>\r\n                    <td>\r\n                      {Object.keys(property['properties']).map((propKey, index) => (\r\n                        <Row key={index}>\r\n                          <Col md=\"4\">{propKey}</Col>\r\n                          <Col md=\"8\">\r\n                            <Badge className=\"float-right badge-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\r\n                          </Col>\r\n                        </Row>\r\n                      ))}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n            : null}\r\n        </tbody>\r\n      </Table>\r\n      {env.propertySources\r\n        ? env.propertySources.map((envKey, envIndex) => (\r\n            <div key={envIndex}>\r\n              <h4>\r\n                <span>{envKey.name}</span>\r\n              </h4>\r\n              <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\r\n                <thead>\r\n                  <tr key={envIndex}>\r\n                    <th className=\"w-40\">Property</th>\r\n                    <th className=\"w-60\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.keys(envKey.properties)\r\n                    .filter(envFilterFn)\r\n                    .map((propKey, propIndex) => (\r\n                      <tr key={propIndex}>\r\n                        <td className=\"break\">{propKey}</td>\r\n                        <td className=\"break\">\r\n                          <span className=\"float-right badge badge-secondary break\">{envKey.properties[propKey].value}</span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  configuration: administration.configuration,\r\n  isFetching: administration.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { getConfigurations, getEnv };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurationPage);\r\n","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-3!./docs.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-3!./docs.scss\",\n      function () {\n        var newContent = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-3!./docs.scss\");\n\n              newContent = newContent.__esModule ? newContent.default : newContent;\n\n              if (typeof newContent === 'string') {\n                newContent = [[module.id, newContent, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, newContent.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = newContent.locals;\n\n              update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import './docs.scss';\r\n\r\nimport React from 'react';\r\n\r\nconst DocsPage = () => (\r\n  <div>\r\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\r\n  </div>\r\n);\r\n\r\nexport default DocsPage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Badge, Table, Button } from 'reactstrap';\r\n\r\nimport { gatewayRoutes } from '../administration.reducer';\r\n\r\nexport interface IGatewayPageProps extends StateProps, DispatchProps {}\r\n\r\nexport class GatewayPage extends React.Component<IGatewayPageProps> {\r\n  componentDidMount() {\r\n    this.props.gatewayRoutes();\r\n  }\r\n\r\n  metadata = instance => {\r\n    const spans = [];\r\n    Object.keys(instance).map((key, index) => {\r\n      spans.push(\r\n        <span key={key.toString() + 'value'}>\r\n          <Badge key={key.toString() + '-containerbadge'} className=\"font-weight-normal\">\r\n            <Badge key={key.toString() + '-badge'} color=\"info\" className=\"font-weight-normal\" pill>\r\n              {key}\r\n            </Badge>\r\n            {instance[key]}\r\n          </Badge>\r\n        </span>\r\n      );\r\n    });\r\n    return spans;\r\n  };\r\n\r\n  badgeInfo = info => {\r\n    if (info) {\r\n      if (info.status === 'UP') {\r\n        return <Badge color=\"success\">{info.status}</Badge>;\r\n      } else {\r\n        return <Badge color=\"danger\">{info.status}</Badge>;\r\n      }\r\n    } else {\r\n      return <Badge color=\"warning\">?</Badge>;\r\n    }\r\n  };\r\n\r\n  instanceInfo = route => {\r\n    if (route) {\r\n      return (\r\n        <Table striped responsive>\r\n          <tbody>\r\n            {route.serviceInstances.map((instance, i) => (\r\n              <tr key={instance.instanceInfo + '-info'}>\r\n                <td>\r\n                  <a href={instance.uri} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {instance.uri}\r\n                  </a>\r\n                </td>\r\n                <td>{this.badgeInfo(instance.instanceInfo)}</td>\r\n                <td>{this.metadata(instance.metadata)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      );\r\n    }\r\n  };\r\n\r\n  gatewayRoutes = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.gatewayRoutes();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { routes, isFetching } = this.props;\r\n    return (\r\n      <div>\r\n        <h2>Gateway</h2>\r\n        <p>\r\n          <Button onClick={this.gatewayRoutes} color={isFetching ? 'danger' : 'primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />\r\n            &nbsp;\r\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\r\n              Refresh\r\n            </Translate>\r\n          </Button>\r\n        </p>\r\n\r\n        <Table striped responsive>\r\n          <thead>\r\n            <tr key=\"header\">\r\n              <th>\r\n                <Translate contentKey=\"gateway.routes.url\">URL</Translate>\r\n              </th>\r\n              <th>\r\n                <Translate contentKey=\"gateway.routes.service\">Service</Translate>\r\n              </th>\r\n              <th>\r\n                <Translate contentKey=\"gateway.routes.servers\">Available servers</Translate>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {routes.map((route, i) => (\r\n              <tr key={`routes-${i}`}>\r\n                <td>{route.path}</td>\r\n                <td>{route.serviceId}</td>\r\n                <td>{this.instanceInfo(route)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = storeState => ({\r\n  routes: storeState.administration.gateway.routes,\r\n  account: storeState.authentication.account,\r\n  isFetching: storeState.administration.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { gatewayRoutes };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GatewayPage);\r\n","import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nconst formatDiskSpaceOutput = rawValue => {\r\n  // Should display storage space in an human readable unit\r\n  const val = rawValue / 1073741824;\r\n  if (val > 1) {\r\n    // Value\r\n    return val.toFixed(2) + ' GB';\r\n  } else {\r\n    return (rawValue / 1048576).toFixed(2) + ' MB';\r\n  }\r\n};\r\n\r\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\r\n  const data = healthObject.details || {};\r\n  return (\r\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\r\n      <ModalBody>\r\n        <Table bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(data).map((key, index) => (\r\n              <tr key={index}>\r\n                <td>{key}</td>\r\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default HealthModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Translate } from 'react-jhipster';\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\n\r\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\r\n\r\nexport const HealthPage = (props: IHealthPageProps) => {\r\n  const [healthObject, setHealthObject] = useState({});\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.systemHealth();\r\n  }, []);\r\n\r\n  const getSystemHealth = () => {\r\n    if (!props.isFetching) {\r\n      props.systemHealth();\r\n    }\r\n  };\r\n\r\n  const getSystemHealthInfo = (name, healthObj) => () => {\r\n    setShowModal(true);\r\n    setHealthObject({ ...healthObj, name });\r\n  };\r\n\r\n  const handleClose = () => setShowModal(false);\r\n\r\n  const renderModal = () => <HealthModal healthObject={healthObject} handleClose={handleClose} showModal={showModal} />;\r\n\r\n  const { health, isFetching } = props;\r\n  const data = (health || {}).components || {};\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"health-page-heading\">Health Checks</h2>\r\n      <p>\r\n        <Button onClick={getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n          <FontAwesomeIcon icon=\"sync\" />\r\n          &nbsp;\r\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\r\n            Refresh\r\n          </Translate>\r\n        </Button>\r\n      </p>\r\n      <Row>\r\n        <Col md=\"12\">\r\n          <Table bordered aria-describedby=\"health-page-heading\">\r\n            <thead>\r\n              <tr>\r\n                <th>Service Name</th>\r\n                <th>Status</th>\r\n                <th>Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\r\n                configPropKey !== 'status' ? (\r\n                  <tr key={configPropIndex}>\r\n                    <td>{configPropKey}</td>\r\n                    <td>\r\n                      <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\r\n                    </td>\r\n                    <td>\r\n                      {data[configPropKey].details ? (\r\n                        <a onClick={getSystemHealthInfo(configPropKey, data[configPropKey])}>\r\n                          <FontAwesomeIcon icon=\"eye\" />\r\n                        </a>\r\n                      ) : null}\r\n                    </td>\r\n                  </tr>\r\n                ) : null\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n      {renderModal()}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  health: storeState.administration.health,\r\n  isFetching: storeState.administration.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { systemHealth };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\r\n","import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport Logs from './logs/logs';\r\nimport Health from './health/health';\r\nimport Metrics from './metrics/metrics';\r\nimport Configuration from './configuration/configuration';\r\nimport Audits from './audits/audits';\r\nimport Docs from './docs/docs';\r\nimport Gateway from './gateway/gateway';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/gateway`} component={Gateway} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Translate } from 'react-jhipster';\r\n\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport const LogsPage = (props: ILogsPageProps) => {\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.getLoggers();\r\n  }, []);\r\n\r\n  const getLogs = () => {\r\n    if (!props.isFetching) {\r\n      props.getLoggers();\r\n    }\r\n  };\r\n\r\n  const changeLevel = (loggerName, level) => () => props.changeLogLevel(loggerName, level);\r\n\r\n  const changeFilter = evt => setFilter(evt.target.value);\r\n\r\n  const getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\r\n\r\n  const filterFn = l => l.name.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const { logs, isFetching } = props;\r\n  const loggers = logs ? Object.entries(logs.loggers).map(e => ({ name: e[0], level: e[1].effectiveLevel })) : [];\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"logs-page-heading\">\r\n        <Translate contentKey=\"logs.title\">Logs</Translate>\r\n      </h2>\r\n      <p>\r\n        <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\r\n          There are {loggers.length.toString()} loggers.\r\n        </Translate>\r\n      </p>\r\n\r\n      <span>\r\n        <Translate contentKey=\"logs.filter\">Filter</Translate>\r\n      </span>\r\n      <input type=\"text\" value={filter} onChange={changeFilter} className=\"form-control\" disabled={isFetching} />\r\n\r\n      <table className=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\r\n        <thead>\r\n          <tr title=\"click to order\">\r\n            <th>\r\n              <span>\r\n                <Translate contentKey=\"logs.table.name\">Name</Translate>\r\n              </span>\r\n            </th>\r\n            <th>\r\n              <span>\r\n                <Translate contentKey=\"logs.table.level\">Level</Translate>\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loggers.filter(filterFn).map((logger, i) => (\r\n            <tr key={`log-row-${i}`}>\r\n              <td>\r\n                <small>{logger.name}</small>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'TRACE')}\r\n                  className={getClassName(logger.level, 'TRACE', 'primary')}\r\n                >\r\n                  TRACE\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'DEBUG')}\r\n                  className={getClassName(logger.level, 'DEBUG', 'success')}\r\n                >\r\n                  DEBUG\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'INFO')}\r\n                  className={getClassName(logger.level, 'INFO', 'info')}\r\n                >\r\n                  INFO\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'WARN')}\r\n                  className={getClassName(logger.level, 'WARN', 'warning')}\r\n                >\r\n                  WARN\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'ERROR')}\r\n                  className={getClassName(logger.level, 'ERROR', 'danger')}\r\n                >\r\n                  ERROR\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'OFF')}\r\n                  className={getClassName(logger.level, 'OFF', 'secondary')}\r\n                >\r\n                  OFF\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  logs: administration.logs,\r\n  isFetching: administration.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Progress, Row, Table } from 'reactstrap';\r\nimport {\r\n  CacheMetrics,\r\n  DatasourceMetrics,\r\n  GarbageCollectorMetrics,\r\n  HttpRequestMetrics,\r\n  JvmMemory,\r\n  JvmThreads,\r\n  EndpointsRequestsMetrics,\r\n  SystemMetrics,\r\n  Translate,\r\n} from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT, APP_WHOLE_NUMBER_FORMAT } from 'app/config/constants';\r\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport const MetricsPage = (props: IMetricsPageProps) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.systemMetrics();\r\n    props.systemThreadDump();\r\n  }, []);\r\n\r\n  const getMetrics = () => {\r\n    if (!props.isFetching) {\r\n      props.systemMetrics();\r\n      props.systemThreadDump();\r\n    }\r\n  };\r\n\r\n  const { metrics, threadDump, isFetching } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"metrics-page-heading\">Application Metrics</h2>\r\n      <p>\r\n        <Button onClick={getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n          <FontAwesomeIcon icon=\"sync\" />\r\n          &nbsp;\r\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\r\n            Refresh\r\n          </Translate>\r\n        </Button>\r\n      </p>\r\n      <hr />\r\n\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <h3>JVM Metrics</h3>\r\n          <Row>\r\n            <Col md=\"4\">\r\n              {metrics && metrics.jvm ? <JvmMemory jvmMetrics={metrics.jvm} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}\r\n            </Col>\r\n            <Col md=\"4\">{threadDump ? <JvmThreads jvmThreads={threadDump} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\r\n            <Col md=\"4\">\r\n              {metrics && metrics.processMetrics ? (\r\n                <SystemMetrics\r\n                  systemMetrics={metrics.processMetrics}\r\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n                  timestampFormat={APP_TIMESTAMP_FORMAT}\r\n                />\r\n              ) : (\r\n                ''\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {metrics && metrics.garbageCollector ? (\r\n        <GarbageCollectorMetrics garbageCollectorMetrics={metrics.garbageCollector} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n      ) : (\r\n        ''\r\n      )}\r\n      {metrics && metrics['http.server.requests'] ? (\r\n        <HttpRequestMetrics\r\n          requestMetrics={metrics['http.server.requests']}\r\n          twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n      {metrics && metrics.services ? (\r\n        <EndpointsRequestsMetrics endpointsRequestsMetrics={metrics.services} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {metrics.cache ? (\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <CacheMetrics cacheMetrics={metrics.cache} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {metrics.databases && JSON.stringify(metrics.databases) !== '{}' ? (\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <DatasourceMetrics datasourceMetrics={metrics.databases} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  metrics: storeState.administration.metrics,\r\n  isFetching: storeState.administration.loading,\r\n  threadDump: storeState.administration.threadDump,\r\n});\r\n\r\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MetricsPage);\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport UserManagementDetail from './user-management-detail';\r\nimport UserManagementUpdate from './user-management-update';\r\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\r\n\r\nconst Routes = ({ match }) => (\r\n  <>\r\n    <Switch>\r\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\r\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\r\n    </Switch>\r\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\r\n  </>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { getUser, deleteUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport const UserManagementDeleteDialog = (props: IUserManagementDeleteDialogProps) => {\r\n  useEffect(() => {\r\n    props.getUser(props.match.params.login);\r\n  }, []);\r\n\r\n  const handleClose = event => {\r\n    event.stopPropagation();\r\n    props.history.push('/admin/user-management');\r\n  };\r\n\r\n  const confirmDelete = event => {\r\n    props.deleteUser(props.user.login);\r\n    handleClose(event);\r\n  };\r\n\r\n  const { user } = props;\r\n\r\n  return (\r\n    <Modal isOpen toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>\r\n        <Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>\r\n          Are you sure you want to delete this User?\r\n        </Translate>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" onClick={handleClose}>\r\n          <FontAwesomeIcon icon=\"ban\" />\r\n          &nbsp;\r\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\r\n        </Button>\r\n        <Button color=\"danger\" onClick={confirmDelete}>\r\n          <FontAwesomeIcon icon=\"trash\" />\r\n          &nbsp;\r\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, deleteUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDeleteDialog);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { languages } from 'app/config/translation';\r\nimport { getUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport const UserManagementDetail = (props: IUserManagementDetailProps) => {\r\n  useEffect(() => {\r\n    props.getUser(props.match.params.login);\r\n  }, []);\r\n\r\n  const { user } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<b>{user.login}</b>]\r\n      </h2>\r\n      <Row size=\"md\">\r\n        <dl className=\"jh-entity-details\">\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n          </dt>\r\n          <dd>\r\n            <span>{user.login}</span>&nbsp;\r\n            {user.activated ? (\r\n              <Badge color=\"success\">\r\n                <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n              </Badge>\r\n            ) : (\r\n              <Badge color=\"danger\">\r\n                <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\r\n              </Badge>\r\n            )}\r\n          </dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\r\n          </dt>\r\n          <dd>{user.firstName}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\r\n          </dt>\r\n          <dd>{user.lastName}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.email\">Email</Translate>\r\n          </dt>\r\n          <dd>{user.email}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\r\n          </dt>\r\n          <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.createdBy\">Created By</Translate>\r\n          </dt>\r\n          <dd>{user.createdBy}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\r\n          </dt>\r\n          <dd>{user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\r\n          </dt>\r\n          <dd>{user.lastModifiedBy}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\r\n          </dt>\r\n          <dd>\r\n            {user.lastModifiedDate ? (\r\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            ) : null}\r\n          </dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n          </dt>\r\n          <dd>\r\n            <ul className=\"list-unstyled\">\r\n              {user.authorities\r\n                ? user.authorities.map((authority, i) => (\r\n                    <li key={`user-auth-${i}`}>\r\n                      <Badge color=\"info\">{authority}</Badge>\r\n                    </li>\r\n                  ))\r\n                : null}\r\n            </ul>\r\n          </dd>\r\n        </dl>\r\n      </Row>\r\n      <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n        <FontAwesomeIcon icon=\"arrow-left\" />{' '}\r\n        <span className=\"d-none d-md-inline\">\r\n          <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n});\r\n\r\nconst mapDispatchToProps = { getUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDetail);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport const UserManagementUpdate = (props: IUserManagementUpdateProps) => {\r\n  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\r\n\r\n  useEffect(() => {\r\n    if (isNew) {\r\n      props.reset();\r\n    } else {\r\n      props.getUser(props.match.params.login);\r\n    }\r\n    props.getRoles();\r\n    return () => {\r\n      props.reset();\r\n    };\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    props.history.push('/admin/user-management');\r\n  };\r\n\r\n  const saveUser = (event, values) => {\r\n    if (isNew) {\r\n      props.createUser(values);\r\n    } else {\r\n      props.updateUser(values);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const isInvalid = false;\r\n  const { user, loading, updating, roles } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h1>\r\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\r\n          </h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            <AvForm onValidSubmit={saveUser}>\r\n              {user.id ? (\r\n                <AvGroup>\r\n                  <Label for=\"id\">\r\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                  </Label>\r\n                  <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\r\n                </AvGroup>\r\n              ) : null}\r\n              <AvGroup>\r\n                <Label for=\"login\">\r\n                  <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"login\"\r\n                  validate={{\r\n                    required: {\r\n                      value: true,\r\n                      errorMessage: translate('register.messages.validate.login.required'),\r\n                    },\r\n                    pattern: {\r\n                      value: '^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$',\r\n                      errorMessage: translate('register.messages.validate.login.pattern'),\r\n                    },\r\n                    minLength: {\r\n                      value: 1,\r\n                      errorMessage: translate('register.messages.validate.login.minlength'),\r\n                    },\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('register.messages.validate.login.maxlength'),\r\n                    },\r\n                  }}\r\n                  value={user.login}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"firstName\">\r\n                  <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"firstName\"\r\n                  validate={{\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 }),\r\n                    },\r\n                  }}\r\n                  value={user.firstName}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"lastName\">\r\n                  <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"lastName\"\r\n                  validate={{\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 }),\r\n                    },\r\n                  }}\r\n                  value={user.lastName}\r\n                />\r\n                <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <AvField\r\n                  name=\"email\"\r\n                  label={translate('global.form.email.label')}\r\n                  placeholder={translate('global.form.email.placeholder')}\r\n                  type=\"email\"\r\n                  validate={{\r\n                    required: {\r\n                      value: true,\r\n                      errorMessage: translate('global.messages.validate.email.required'),\r\n                    },\r\n                    email: {\r\n                      errorMessage: translate('global.messages.validate.email.invalid'),\r\n                    },\r\n                    minLength: {\r\n                      value: 5,\r\n                      errorMessage: translate('global.messages.validate.email.minlength'),\r\n                    },\r\n                    maxLength: {\r\n                      value: 254,\r\n                      errorMessage: translate('global.messages.validate.email.maxlength'),\r\n                    },\r\n                  }}\r\n                  value={user.email}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup check>\r\n                <Label>\r\n                  <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} checked={user.activated} disabled={!user.id} />{' '}\r\n                  <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n                </Label>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"langKey\">\r\n                  <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\r\n                </Label>\r\n                <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey || locales[0]}>\r\n                  {locales.map(locale => (\r\n                    <option value={locale} key={locale}>\r\n                      {languages[locale].name}\r\n                    </option>\r\n                  ))}\r\n                </AvField>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"authorities\">\r\n                  <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n                </Label>\r\n                <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\r\n                  {roles.map(role => (\r\n                    <option value={role} key={role}>\r\n                      {role}\r\n                    </option>\r\n                  ))}\r\n                </AvInput>\r\n              </AvGroup>\r\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n                <FontAwesomeIcon icon=\"arrow-left\" />\r\n                &nbsp;\r\n                <span className=\"d-none d-md-inline\">\r\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                </span>\r\n              </Button>\r\n              &nbsp;\r\n              <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\r\n                <FontAwesomeIcon icon=\"save\" />\r\n                &nbsp;\r\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n              </Button>\r\n            </AvForm>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n  roles: storeState.userManagement.authorities,\r\n  loading: storeState.userManagement.loading,\r\n  updating: storeState.userManagement.updating,\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport const UserManagement = (props: IUserManagementProps) => {\r\n  const [pagination, setPagination] = useState(\r\n    overridePaginationStateWithQueryParams(getSortState(props.location, ITEMS_PER_PAGE), props.location.search)\r\n  );\r\n\r\n  useEffect(() => {\r\n    props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\r\n    const endURL = `?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`;\r\n    if (props.location.search !== endURL) {\r\n      props.history.push(`${props.location.pathname}${endURL}`);\r\n    }\r\n  }, [pagination.activePage, pagination.order, pagination.sort]);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(props.location.search);\r\n    const page = params.get('page');\r\n    const sort = params.get('sort');\r\n    if (page && sort) {\r\n      const sortSplit = sort.split(',');\r\n      setPagination({\r\n        ...pagination,\r\n        activePage: +page,\r\n        sort: sortSplit[0],\r\n        order: sortSplit[1],\r\n      });\r\n    }\r\n  }, [props.location.search]);\r\n\r\n  const sort = p => () =>\r\n    setPagination({\r\n      ...pagination,\r\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\r\n      sort: p,\r\n    });\r\n\r\n  const handlePagination = currentPage =>\r\n    setPagination({\r\n      ...pagination,\r\n      activePage: currentPage,\r\n    });\r\n\r\n  const toggleActive = user => () =>\r\n    props.updateUser({\r\n      ...user,\r\n      activated: !user.activated,\r\n    });\r\n\r\n  const { users, account, match, totalItems } = props;\r\n  return (\r\n    <div>\r\n      <h2 id=\"user-management-page-heading\">\r\n        <Translate contentKey=\"userManagement.home.title\">Users</Translate>\r\n        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\r\n          <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\r\n        </Link>\r\n      </h2>\r\n      <Table responsive striped>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"hand\" onClick={sort('id')}>\r\n              <Translate contentKey=\"global.field.id\">ID</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('login')}>\r\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('email')}>\r\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n            <th className=\"hand\" onClick={sort('langKey')}>\r\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th>\r\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('createdDate')}>\r\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user, i) => (\r\n            <tr id={user.login} key={`user-${i}`}>\r\n              <td>\r\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\r\n                  {user.id}\r\n                </Button>\r\n              </td>\r\n              <td>{user.login}</td>\r\n              <td>{user.email}</td>\r\n              <td>\r\n                {user.activated ? (\r\n                  <Button color=\"success\" onClick={toggleActive(user)}>\r\n                    <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n                  </Button>\r\n                ) : (\r\n                  <Button color=\"danger\" onClick={toggleActive(user)}>\r\n                    <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\r\n                  </Button>\r\n                )}\r\n              </td>\r\n              <td>{user.langKey}</td>\r\n              <td>\r\n                {user.authorities\r\n                  ? user.authorities.map((authority, j) => (\r\n                      <div key={`user-auth-${i}-${j}`}>\r\n                        <Badge color=\"info\">{authority}</Badge>\r\n                      </div>\r\n                    ))\r\n                  : null}\r\n              </td>\r\n              <td>\r\n                {user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}\r\n              </td>\r\n              <td>{user.lastModifiedBy}</td>\r\n              <td>\r\n                {user.lastModifiedDate ? (\r\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                ) : null}\r\n              </td>\r\n              <td className=\"text-right\">\r\n                <div className=\"btn-group flex-btn-group-container\">\r\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"eye\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.view\">View</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.edit\">Edit</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button\r\n                    tag={Link}\r\n                    to={`${match.url}/${user.login}/delete`}\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    disabled={account.login === user.login}\r\n                  >\r\n                    <FontAwesomeIcon icon=\"trash\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n                    </span>\r\n                  </Button>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      {props.totalItems ? (\r\n        <div className={users && users.length > 0 ? '' : 'd-none'}>\r\n          <Row className=\"justify-content-center\">\r\n            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\r\n          </Row>\r\n          <Row className=\"justify-content-center\">\r\n            <JhiPagination\r\n              activePage={pagination.activePage}\r\n              onSelect={handlePagination}\r\n              maxButtons={5}\r\n              itemsPerPage={pagination.itemsPerPage}\r\n              totalItems={props.totalItems}\r\n            />\r\n          </Row>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  users: storeState.userManagement.users,\r\n  totalItems: storeState.userManagement.totalItems,\r\n  account: storeState.authentication.account,\r\n});\r\n\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AAGA;AAEA;AACA;AAEA;AACA;AAcA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;ACnLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAIA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;;AAKA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AA4CA;AAvGA;AACA;AACA;AA2DA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AAGA;AAWA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;AClGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAeA;AAKA;AASA;AAMA;AAEA;AACA;AAOA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;ACnHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AAQA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;AC9NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAOA;AAMA;AAMA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAGA;AAIA;AAIA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AAOA;AAAA;AACA;AACA;AASA;AAEA;AACA;AAEA;AACA;AAcA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;A","sourceRoot":""}